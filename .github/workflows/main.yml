name: Build, Deploy, and Restart Docker Container

on:
  push:
    branches:
      - main

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:12-bullseye
        env:
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DB_NAME }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5    

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up JDK 21
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      # Step 3: Build the project with Gradle
      - name: Build with Gradle
        working-directory: ./evenhi
        run: ./gradlew clean build
        env:
          CI: true

      # Step 3: Verify .jat exist
      - name: Check if .jar file exists
        working-directory: ./evenhi
        run: |
          ls -l build/libs
      
      # Step 4: Transfer the .jar file to the VM
      - name: Deploy .jar to VM
        uses: appleboy/scp-action@v0.1.0
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          source: ./evenhi/build/libs/evenhi-0.0.1-SNAPSHOT.jar
          target: ${{ secrets.VM_PATH }}

      # Step 5: Run Docker Compose to recreate the container
      - name: Restart Docker Container on VM
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          script: |
            cd ${{ secrets.VM_PATH_RECREATE }}
            docker compose up --force-recreate -d
